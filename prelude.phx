2drop: drop drop ;

keep: over 'call dip ;
bi: 'keep dip call ;
tri: ('keep dip keep) dip call ;

2curry: curry curry ;
with: swapd (swapd call) 2curry ;
cleave: 'call with each ;

2dip: swap 'dip dip ;
2keep: '2dup dip 2dip ;
2bi: '2keep dip call ;

bi*: 'dip dip call ;
2bi*: '2dip dip call ;
bi@: dup bi* ;
2bi@: dup 2bi* ;

+-: '+ '- 2bi ;

first: 0 nth ;
last: -1 nth ;

part: 'select 'reject 2bi ;

rotd: 'rot dip ;
roll: rotd swap ;

forever: 'true swap while ;

if*: pick 'drop '2nip if call ;
unless: swap if ;
when: () if ;
when*: over 'call '2drop if ;
while*: ('dup compose) dip while drop ;

prepose: swap compose ;

reduce: swapd each ;
zipwith: 'zip dip map ;
mapif: swapd select map ;

replicate: [] ['v] <-
  (v >> drop) compose swap times v ;
accumulate: [] ['v] <-
  (over v >> drop) prepose reduce v ;
produce: [] ['v] <-
  (v >> drop) compose while v ;
interpose: []
  rot (<< over <<) each pop* drop nip ;

min: 2dup < 'drop 'nip if ;
max: 2dup > 'drop 'nip if ;
neg: -1 * ;
sign: [(0 >) (drop 1)
       (0 <) (drop -1)] cond ;
abs: dup sign * ;

flat1: [] swap
  (dup vec? ('<< each) '<< if) each ;

gcd: dup 0? 'drop (tuck % gcd) if ;
lcm: 2dup gcd '* dip / ;

cart*: swap
  (over (dupd 2 ->vec) map nip) map nip flat1 ;

/%: '/ '% 2bi ;

+1: 1 + ;
-1: 1 - ;
0?: 0 = ;

put*: put drop ;
update: pick pick get swap call put* ;

pop*: dup pop ;

.>.: dup 0 > ('<=) ('>=) if ['end 'skip 'cmp] <-
  (dup end cmp call) ((skip +) keep) produce nip ;
